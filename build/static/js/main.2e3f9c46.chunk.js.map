{"version":3,"sources":["ValidateLoginForm.js","index.js"],"names":["ValidatedLoginForm","react_default","a","createElement","formik_esm","initialValues","email","password","onSubmit","values","_ref","setSubmitting","console","log","validationSchema","Yup","shape","required","min","matches","props","touched","errors","handleChange","isSubmitting","handleBlur","handleSubmit","htmlFor","name","type","placeholder","value","onChange","onBlur","className","rootElement","document","getElementById","ReactDOM","render","ValidateLoginForm"],"mappings":"qOA+FeA,EA1FY,kBACzBC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAU,SAACC,EAADC,GAA+BA,EAApBC,cACnBC,QAAQC,IAAI,cACZD,QAAQC,IAAIJ,IAGdK,iBAAkBC,WAAaC,MAAM,CACnCV,MAAOS,WACJT,QACAW,SAAS,YACZV,SAAUQ,WACPE,SAAS,yBACTC,IAAI,EAAG,sDACPC,QAAQ,cAAe,sCA4B3B,SAAAC,GAAS,IAENX,EAOEW,EAPFX,OACAY,EAMED,EANFC,QACAC,EAKEF,EALFE,OAEAC,GAGEH,EAJFI,aAIEJ,EAHFG,cACAE,EAEEL,EAFFK,WACAC,EACEN,EADFM,aAEF,OACEzB,EAAAC,EAAAC,cAAA,QAAMK,SAAUkB,GACdzB,EAAAC,EAAAC,cAAA,SAAOwB,QAAQ,SAAf,SACA1B,EAAAC,EAAAC,cAAA,SACEyB,KAAK,QACLC,KAAK,OACLC,YAAY,mBACZC,MAAOtB,EAAOH,MACd0B,SAAUT,EACVU,OAAQR,EACRS,UAAWZ,EAAOhB,OAASe,EAAQf,OAAS,UAE7CgB,EAAOhB,OAASe,EAAQf,OACvBL,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,kBAAkBZ,EAAOhB,OAE1CL,EAAAC,EAAAC,cAAA,SAAOwB,QAAQ,SAAf,YACA1B,EAAAC,EAAAC,cAAA,SACEyB,KAAK,WACLC,KAAK,WACLC,YAAY,sBACZC,MAAOtB,EAAOF,SACdyB,SAAUT,EACVU,OAAQR,EACRS,UAAWZ,EAAOhB,OAASe,EAAQf,OAAS,UAE7CgB,EAAOhB,OAASe,EAAQf,OACvBL,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,kBAAkBZ,EAAOhB,OAE1CL,EAAAC,EAAAC,cAAA,UAAQ0B,KAAK,UAAb,aCvEV,IAAMM,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOtC,EAAAC,EAAAC,cAVhB,WACE,OACEF,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACqC,EAAD,QAMU,MAASL","file":"static/js/main.2e3f9c46.chunk.js","sourcesContent":["import React, { Children } from \"react\";\nimport { Formik } from \"formik\";\nimport * as EmailValidator from \"email-validator\";\nimport * as Yup from \"yup\";\n\nconst ValidatedLoginForm = () => (\n  <Formik\n    initialValues={{ email: \"\", password: \"\" }}\n    onSubmit={(values, { setSubmitting }) => {\n      console.log(\"Submitting\");\n      console.log(values);\n    }}\n    // Instead of using validate instruction ourselves just use the Yup package.\n    validationSchema={Yup.object().shape({\n      email: Yup.string()\n        .email()\n        .required(\"Required\"),\n      password: Yup.string()\n        .required(\"No password provided.\")\n        .min(8, \"Password is too short - should be 8 chars minimum.\")\n        .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n    })}\n\n    // validate = { values =>{\n    //   let errors ={};\n\n    //   if (!values.email){\n    //     errors.email = \"Required\";\n    //   }\n    //   else if(!EmailValidator.validate(values.email)){\n    //     errors.email = \"Invalid Email Address\"\n    //   }\n\n    //   const passwordRegex = /(?=.*[0-9])/)\n    //   // requires a number between 0 - 9\n\n    //   if (!values.password){\n    //     errors.password = \"Required\";\n    //   }\n    //   else if(values.password.length < 8){\n    //     errors.password = \"Password must be 9 characters long.\"\n    //   }\n    //   else if (!passwordRegex.text(values.password)){\n    //     errors.password = \"Invalid password. Must contain one number.\"\n    //   }\n    //   return errors;\n    // }}\n  >\n    {props => {\n      const {\n        values,\n        touched,\n        errors,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleSubmit\n      } = props;\n      return (\n        <form onSubmit={handleSubmit}>\n          <label htmlFor=\"email\">Email</label>\n          <input\n            name=\"email\"\n            type=\"text\"\n            placeholder=\"Enter your email\"\n            value={values.email}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            className={errors.email && touched.email && \"error\"}\n          />\n          {errors.email && touched.email && (\n            <div className=\"input-feedback\">{errors.email}</div>\n          )}\n          <label htmlFor=\"email\">Password</label>\n          <input\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"Enter your password\"\n            value={values.password}\n            onChange={handleChange}\n            onBlur={handleBlur}\n            className={errors.email && touched.email && \"error\"}\n          />\n          {errors.email && touched.email && (\n            <div className=\"input-feedback\">{errors.email}</div>\n          )}\n          <button type=\"submit\">Login</button>\n        </form>\n      );\n    }}\n    {/* \nFormik uses render props to pass properties to its Children. Children now has access to properties.  */}\n  </Formik>\n);\n\nexport default ValidatedLoginForm;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles.css\";\nimport ValidatedLoginForm from \"./ValidateLoginForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Validated Login Form</h1>\n      <ValidatedLoginForm />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}